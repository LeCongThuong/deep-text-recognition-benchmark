DataParallel(
  (module): Model(
    (Transformation): TPS_SpatialTransformerNetwork(
      (LocalizationNetwork): LocalizationNetwork(
        (conv): Sequential(
          (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
          (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (6): ReLU(inplace=True)
          (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
          (8): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (10): ReLU(inplace=True)
          (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
          (12): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (13): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (14): ReLU(inplace=True)
          (15): AdaptiveAvgPool2d(output_size=1)
        )
        (localization_fc1): Sequential(
          (0): Linear(in_features=512, out_features=256, bias=True)
          (1): ReLU(inplace=True)
        )
        (localization_fc2): Linear(in_features=256, out_features=40, bias=True)
      )
      (GridGenerator): GridGenerator()
    )
    (FeatureExtraction): ResNet_FeatureExtractor(
      (ConvNet): ResNet(
        (conv0_1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn0_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv0_2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn0_2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
        )
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (maxpool3): MaxPool2d(kernel_size=2, stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (3): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (4): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (conv3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
        (conv4_1): Conv2d(512, 512, kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), bias=False)
        (bn4_1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv4_2): Conv2d(512, 512, kernel_size=(2, 2), stride=(1, 1), bias=False)
        (bn4_2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (AdaptiveAvgPool): AdaptiveAvgPool2d(output_size=(None, 1))
    (SequenceModeling): Sequential(
      (0): BidirectionalLSTM(
        (rnn): LSTM(512, 256, batch_first=True, bidirectional=True)
        (linear): Linear(in_features=512, out_features=256, bias=True)
      )
      (1): BidirectionalLSTM(
        (rnn): LSTM(256, 256, batch_first=True, bidirectional=True)
        (linear): Linear(in_features=512, out_features=256, bias=True)
      )
    )
    (Prediction): Attention(
      (attention_cell): AttentionCell(
        (i2h): Linear(in_features=256, out_features=256, bias=False)
        (h2h): Linear(in_features=256, out_features=256, bias=True)
        (score): Linear(in_features=256, out_features=1, bias=False)
        (rnn): LSTMCell(294, 256)
      )
      (generator): Linear(in_features=256, out_features=38, bias=True)
    )
  )
)

module.Transformation.LocalizationNetwork.conv.0.weight
module.Transformation.LocalizationNetwork.conv.1.weight
module.Transformation.LocalizationNetwork.conv.1.bias
module.Transformation.LocalizationNetwork.conv.4.weight
module.Transformation.LocalizationNetwork.conv.5.weight
module.Transformation.LocalizationNetwork.conv.5.bias
module.Transformation.LocalizationNetwork.conv.8.weight
module.Transformation.LocalizationNetwork.conv.9.weight
module.Transformation.LocalizationNetwork.conv.9.bias
module.Transformation.LocalizationNetwork.conv.12.weight
module.Transformation.LocalizationNetwork.conv.13.weight
module.Transformation.LocalizationNetwork.conv.13.bias
module.Transformation.LocalizationNetwork.localization_fc1.0.weight
module.Transformation.LocalizationNetwork.localization_fc1.0.bias
module.Transformation.LocalizationNetwork.localization_fc2.weight
module.Transformation.LocalizationNetwork.localization_fc2.bias
module.FeatureExtraction.ConvNet.conv0_1.weight
module.FeatureExtraction.ConvNet.bn0_1.weight
module.FeatureExtraction.ConvNet.bn0_1.bias
module.FeatureExtraction.ConvNet.conv0_2.weight
module.FeatureExtraction.ConvNet.bn0_2.weight
module.FeatureExtraction.ConvNet.bn0_2.bias
module.FeatureExtraction.ConvNet.layer1.0.conv1.weight
module.FeatureExtraction.ConvNet.layer1.0.bn1.weight
module.FeatureExtraction.ConvNet.layer1.0.bn1.bias
module.FeatureExtraction.ConvNet.layer1.0.conv2.weight
module.FeatureExtraction.ConvNet.layer1.0.bn2.weight
module.FeatureExtraction.ConvNet.layer1.0.bn2.bias
module.FeatureExtraction.ConvNet.layer1.0.downsample.0.weight
module.FeatureExtraction.ConvNet.layer1.0.downsample.1.weight
module.FeatureExtraction.ConvNet.layer1.0.downsample.1.bias
module.FeatureExtraction.ConvNet.conv1.weight
module.FeatureExtraction.ConvNet.bn1.weight
module.FeatureExtraction.ConvNet.bn1.bias
module.FeatureExtraction.ConvNet.layer2.0.conv1.weight
module.FeatureExtraction.ConvNet.layer2.0.bn1.weight
module.FeatureExtraction.ConvNet.layer2.0.bn1.bias
module.FeatureExtraction.ConvNet.layer2.0.conv2.weight
module.FeatureExtraction.ConvNet.layer2.0.bn2.weight
module.FeatureExtraction.ConvNet.layer2.0.bn2.bias
module.FeatureExtraction.ConvNet.layer2.0.downsample.0.weight
module.FeatureExtraction.ConvNet.layer2.0.downsample.1.weight
module.FeatureExtraction.ConvNet.layer2.0.downsample.1.bias
module.FeatureExtraction.ConvNet.layer2.1.conv1.weight
module.FeatureExtraction.ConvNet.layer2.1.bn1.weight
module.FeatureExtraction.ConvNet.layer2.1.bn1.bias
module.FeatureExtraction.ConvNet.layer2.1.conv2.weight
module.FeatureExtraction.ConvNet.layer2.1.bn2.weight
module.FeatureExtraction.ConvNet.layer2.1.bn2.bias
module.FeatureExtraction.ConvNet.conv2.weight
module.FeatureExtraction.ConvNet.bn2.weight
module.FeatureExtraction.ConvNet.bn2.bias
module.FeatureExtraction.ConvNet.layer3.0.conv1.weight
module.FeatureExtraction.ConvNet.layer3.0.bn1.weight
module.FeatureExtraction.ConvNet.layer3.0.bn1.bias
module.FeatureExtraction.ConvNet.layer3.0.conv2.weight
module.FeatureExtraction.ConvNet.layer3.0.bn2.weight
module.FeatureExtraction.ConvNet.layer3.0.bn2.bias
module.FeatureExtraction.ConvNet.layer3.0.downsample.0.weight
module.FeatureExtraction.ConvNet.layer3.0.downsample.1.weight
module.FeatureExtraction.ConvNet.layer3.0.downsample.1.bias
module.FeatureExtraction.ConvNet.layer3.1.conv1.weight
module.FeatureExtraction.ConvNet.layer3.1.bn1.weight
module.FeatureExtraction.ConvNet.layer3.1.bn1.bias
module.FeatureExtraction.ConvNet.layer3.1.conv2.weight
module.FeatureExtraction.ConvNet.layer3.1.bn2.weight
module.FeatureExtraction.ConvNet.layer3.1.bn2.bias
module.FeatureExtraction.ConvNet.layer3.2.conv1.weight
module.FeatureExtraction.ConvNet.layer3.2.bn1.weight
module.FeatureExtraction.ConvNet.layer3.2.bn1.bias
module.FeatureExtraction.ConvNet.layer3.2.conv2.weight
module.FeatureExtraction.ConvNet.layer3.2.bn2.weight
module.FeatureExtraction.ConvNet.layer3.2.bn2.bias
module.FeatureExtraction.ConvNet.layer3.3.conv1.weight
module.FeatureExtraction.ConvNet.layer3.3.bn1.weight
module.FeatureExtraction.ConvNet.layer3.3.bn1.bias
module.FeatureExtraction.ConvNet.layer3.3.conv2.weight
module.FeatureExtraction.ConvNet.layer3.3.bn2.weight
module.FeatureExtraction.ConvNet.layer3.3.bn2.bias
module.FeatureExtraction.ConvNet.layer3.4.conv1.weight
module.FeatureExtraction.ConvNet.layer3.4.bn1.weight
module.FeatureExtraction.ConvNet.layer3.4.bn1.bias
module.FeatureExtraction.ConvNet.layer3.4.conv2.weight
module.FeatureExtraction.ConvNet.layer3.4.bn2.weight
module.FeatureExtraction.ConvNet.layer3.4.bn2.bias
module.FeatureExtraction.ConvNet.conv3.weight
module.FeatureExtraction.ConvNet.bn3.weight
module.FeatureExtraction.ConvNet.bn3.bias
module.FeatureExtraction.ConvNet.layer4.0.conv1.weight
module.FeatureExtraction.ConvNet.layer4.0.bn1.weight
module.FeatureExtraction.ConvNet.layer4.0.bn1.bias
module.FeatureExtraction.ConvNet.layer4.0.conv2.weight
module.FeatureExtraction.ConvNet.layer4.0.bn2.weight
module.FeatureExtraction.ConvNet.layer4.0.bn2.bias
module.FeatureExtraction.ConvNet.layer4.1.conv1.weight
module.FeatureExtraction.ConvNet.layer4.1.bn1.weight
module.FeatureExtraction.ConvNet.layer4.1.bn1.bias
module.FeatureExtraction.ConvNet.layer4.1.conv2.weight
module.FeatureExtraction.ConvNet.layer4.1.bn2.weight
module.FeatureExtraction.ConvNet.layer4.1.bn2.bias
module.FeatureExtraction.ConvNet.layer4.2.conv1.weight
module.FeatureExtraction.ConvNet.layer4.2.bn1.weight
module.FeatureExtraction.ConvNet.layer4.2.bn1.bias
module.FeatureExtraction.ConvNet.layer4.2.conv2.weight
module.FeatureExtraction.ConvNet.layer4.2.bn2.weight
module.FeatureExtraction.ConvNet.layer4.2.bn2.bias
module.FeatureExtraction.ConvNet.conv4_1.weight
module.FeatureExtraction.ConvNet.bn4_1.weight
module.FeatureExtraction.ConvNet.bn4_1.bias
module.FeatureExtraction.ConvNet.conv4_2.weight
module.FeatureExtraction.ConvNet.bn4_2.weight
module.FeatureExtraction.ConvNet.bn4_2.bias
module.SequenceModeling.SequenceModeling.0.rnn.weight_ih_l0
module.SequenceModeling.SequenceModeling.0.rnn.weight_hh_l0
module.SequenceModeling.SequenceModeling.0.rnn.bias_ih_l0
module.SequenceModeling.SequenceModeling.0.rnn.bias_hh_l0
module.SequenceModeling.SequenceModeling.0.rnn.weight_ih_l0_reverse
module.SequenceModeling.SequenceModeling.0.rnn.weight_hh_l0_reverse
module.SequenceModeling.SequenceModeling.0.rnn.bias_ih_l0_reverse
module.SequenceModeling.SequenceModeling.0.rnn.bias_hh_l0_reverse
module.SequenceModeling.SequenceModeling.0.linear.weight
module.SequenceModeling.SequenceModeling.0.linear.bias
module.SequenceModeling.SequenceModeling.1.rnn.weight_ih_l0
module.SequenceModeling.SequenceModeling.1.rnn.weight_hh_l0
module.SequenceModeling.SequenceModeling.1.rnn.bias_ih_l0
module.SequenceModeling.SequenceModeling.1.rnn.bias_hh_l0
module.SequenceModeling.SequenceModeling.1.rnn.weight_ih_l0_reverse
module.SequenceModeling.SequenceModeling.1.rnn.weight_hh_l0_reverse
module.SequenceModeling.SequenceModeling.1.rnn.bias_ih_l0_reverse
module.SequenceModeling.SequenceModeling.1.rnn.bias_hh_l0_reverse
module.SequenceModeling.SequenceModeling.1.linear.weight
module.SequenceModeling.SequenceModeling.1.linear.bias
module.Prediction.attention_cell.i2h.weight
module.Prediction.attention_cell.h2h.weight
module.Prediction.attention_cell.h2h.bias
module.Prediction.attention_cell.score.weight
module.Prediction.attention_cell.rnn.weight_ih
module.Prediction.attention_cell.rnn.weight_hh
module.Prediction.attention_cell.rnn.bias_ih
module.Prediction.attention_cell.rnn.bias_hh
module.Prediction.generator.weight
module.Prediction.generator.bias